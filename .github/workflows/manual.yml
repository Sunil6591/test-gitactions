name: IATA manual deployment
on:
  workflow_dispatch:
    inputs:
      iata:
        description: 'IATA'
        required: true
      onlyForBox:
        description: 'Only for box'
        type: boolean
        default: false
        required: true
env:
  ENV1: ${{ secrets.TEST }}
  ENV2: ${{ vars.TEST2 }}
jobs:
  build:
    # name: Building for ${{ inputs.iata }} 
    # runs-on: ubuntu-latest
    # outputs:
    #   filename: ${{ steps.zipping.outputs.filename }}
    #   s3Path: ${{ steps.deploy_s3.outputs.s3Path }}
    # steps:
    # - uses: actions/checkout@v3
    # - uses: actions/setup-node@v3
    #   with:
    #     node-version: '10'
    #     cache: 'npm'
    # - run: npm ci
    # - run: npm test
    # - run: npm run build
    # - run: mkdir -p dist/node_modules
    # - run: cp -R node_modules/* dist/node_modules
    # - run: ls -l dist/
    # - id: 'zipping'
    #   env:
    #     FILENAME: echo ${{ github.repository }} | awk -F/ '{print $NF}'
    #   run: echo $FILENAME
    # - id: zipping2
    #   working-directory: ./dist
    #   run: zip test.zip *
    # - name: Calc md5
    #   working-directory: ./dist
    #   run: md5sum test.zip | awk '{print $1}' >> md5.txt
    # - name: Upload zip file
    #   uses: actions/upload-artifact@v3
    #   with:
    #     name: bundle
    #     path: |
    #       dist/test.zip
    #       dist/md5.txt
    # - run: ls -l dist/
    # - run: ls -l
    # - run: echo "filename=$(echo '${{ github.repository }}' | awk -F/ '{print $NF}')" >> $GITHUB_OUTPUT
    # - id: 'deploy_s3'
    #   run: echo "s3Path=s3//test.zip" >> $GITHUB_OUTPUT
    runs-on: ubuntu-latest
    outputs:
      packageVersion: ${{ steps.version.outputs.build }}
      zipFileName: ${{ steps.zipFileName.outputs.build }}
    steps:
      - uses: actions/checkout@v3
      - run: echo ${{ env.TEST }}
      - run: echo ${{ env.TEST2 }}
      - uses: mikepenz/release-changelog-builder-action@v3
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        id: release_notes
        with:
          configurationJson: |
            {
              "template": "#{{CHANGELOG}}\n\n#{{UNCATEGORIZED}}",
              "categories": [
                {
                    "title": "## ðŸ’¬ Other",
                    "labels": ["other"]
                },
                {
                    "title": "## ðŸ“¦ Dependencies",
                    "labels": ["dependencies"]
                }
              ]
            }
          fromTag: "v1.0.0"
          toTag: "main"
          commitMode: true
          outputFile: CHANGELOG.md
      - run: echo ${{steps.release_notes.outputs.fromTag}}
      - run: echo ${{steps.release_notes.outputs.toTag}}
      - run: echo ${{steps.release_notes.outputs.changed_files}}
      - run: echo ${{steps.release_notes.outputs.changes}}
      - run: echo ${{steps.release_notes.outputs.changelog}}
      - run: ls -l
  #   - uses: actions/setup-node@v3
  #     with:
  #       node-version: '10'
  #       cache: 'npm'
  #   - run: echo ${{ secrets.TEST }}
  #   - run: ls -l
  #   - run: cat ./package.json | jq '.version' | tr -d '"'
  #   - name: Set env
  #     run: echo "PACKAGE_VERSION=$(cat ./package.json | jq '.version' | tr -d '"')" >> $GITHUB_ENV
  #   - run: echo ${{ env.PACKAGE_VERSION }}
  #   - name: Set zip file
  #     run: echo "ZIP_FILENAME=airfi-platform-${{ inputs.IATA }}-${{ env.PACKAGE_VERSION}}-$(date +%Y-%m-%d_T%H.%MZ).zip" >> $GITHUB_ENV
  #   - run: ls /
  #   - run: pwd
  #   - run: npm run deployNew
  #   - run: ls -R
  #   - run: pwd
  #   - name: Upload pax client airtifacts
  #     uses: actions/upload-artifact@v3
  #     with:
  #       name: artifacts
  #       path: |
  #         ./artifacts/**/*.zip
  #   - name: Set version output
  #     id: version
  #     run: echo "build=${{ env.PACKAGE_VERSION }}" >> "$GITHUB_OUTPUT"
  #   - name: Set zip file output
  #     id: zipFileName
  #     run: echo "build=${{ env.ZIP_FILENAME }}" >> "$GITHUB_OUTPUT"
  # print:
  #   needs: [build]
  #   runs-on: ubuntu-latest
  #   env:
  #     PACKAGE_VERSION: ${{needs.build.outputs.packageVersion}}
  #     ZIP_FILENAME: ${{needs.build.outputs.zipFileName}}
  #   steps:
  #   - run: echo ${{ env.ZIP_FILENAME }}
  #   - run: echo ${{ env.PACKAGE_VERSION }}

  # deploy:
  #   name: Deploying for ${{ inputs.iata }} 
  #   if: inputs.onlyForBox == false
  #   runs-on: ubuntu-latest
  #   needs: build
  #   steps:
  #     - run: echo ${{ inputs.onlyForBox }}
  #     - env:
  #         OUTPUT1: ${{needs.build.outputs.filename}}
  #         OUTPUT2: ${{needs.build.outputs.s3Path}}
  #       run: echo "$OUTPUT1 $OUTPUT2"
  #     - name: 'Manifest deployment'
  #       run: echo 'Manifest deployed'
