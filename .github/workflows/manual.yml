name: IATA manual deployment
on:
  workflow_dispatch:
    inputs:
      iata:
        description: 'IATA'
        required: true
      onlyForBox:
        description: 'Only for box'
        type: boolean
        default: false
        required: true
jobs:
  analyze:
    name: Analyze
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'javascript' ]
        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python', 'ruby' ]
        # Use only 'java' to analyze code written in Java, Kotlin or both
        # Use only 'javascript' to analyze code written in JavaScript, TypeScript or both
        # Learn more about CodeQL language support at https://aka.ms/codeql-docs/language-support

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    # Initializes the CodeQL tools for scanning.
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: ${{ matrix.language }}
        # If you wish to specify custom queries, you can do so here or in a config file.
        # By default, queries listed here will override any specified in a config file.
        # Prefix the list here with "+" to use these queries and those in the config file.

        # Details on CodeQL's query packs refer to : https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/configuring-code-scanning#using-queries-in-ql-packs
        # queries: security-extended,security-and-quality


    # Autobuild attempts to build any compiled languages  (C/C++, C#, Go, or Java).
    # If this step fails, then you should remove it and run the build manually (see below)
    - name: Autobuild
      uses: github/codeql-action/autobuild@v2

    # ℹ️ Command-line programs to run using the OS shell.
    # 📚 See https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepsrun

    #   If the Autobuild fails above, remove it and uncomment the following three lines.
    #   modify them (or add more) to build your code if your project, please refer to the EXAMPLE below for guidance.

    # - run: |
    #     echo "Run, Build Application using script"
    #     ./location_of_script_within_repo/buildscript.sh

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2
      with:
        category: "/language:${{matrix.language}}"
  build:
    # name: Building for ${{ inputs.iata }} 
    # runs-on: ubuntu-latest
    # outputs:
    #   filename: ${{ steps.zipping.outputs.filename }}
    #   s3Path: ${{ steps.deploy_s3.outputs.s3Path }}
    # steps:
    # - uses: actions/checkout@v3
    # - uses: actions/setup-node@v3
    #   with:
    #     node-version: '10'
    #     cache: 'npm'
    # - run: npm ci
    # - run: npm test
    # - run: npm run build
    # - run: mkdir -p dist/node_modules
    # - run: cp -R node_modules/* dist/node_modules
    # - run: ls -l dist/
    # - id: 'zipping'
    #   env:
    #     FILENAME: echo ${{ github.repository }} | awk -F/ '{print $NF}'
    #   run: echo $FILENAME
    # - id: zipping2
    #   working-directory: ./dist
    #   run: zip test.zip *
    # - name: Calc md5
    #   working-directory: ./dist
    #   run: md5sum test.zip | awk '{print $1}' >> md5.txt
    # - name: Upload zip file
    #   uses: actions/upload-artifact@v3
    #   with:
    #     name: bundle
    #     path: |
    #       dist/test.zip
    #       dist/md5.txt
    # - run: ls -l dist/
    # - run: ls -l
    # - run: echo "filename=$(echo '${{ github.repository }}' | awk -F/ '{print $NF}')" >> $GITHUB_OUTPUT
    # - id: 'deploy_s3'
    #   run: echo "s3Path=s3//test.zip" >> $GITHUB_OUTPUT
    - run: ls /
    - run: npm run deployNew
    - run: ls /
  # deploy:
  #   name: Deploying for ${{ inputs.iata }} 
  #   if: inputs.onlyForBox == false
  #   runs-on: ubuntu-latest
  #   needs: build
  #   steps:
  #     - run: echo ${{ inputs.onlyForBox }}
  #     - env:
  #         OUTPUT1: ${{needs.build.outputs.filename}}
  #         OUTPUT2: ${{needs.build.outputs.s3Path}}
  #       run: echo "$OUTPUT1 $OUTPUT2"
  #     - name: 'Manifest deployment'
  #       run: echo 'Manifest deployed'
